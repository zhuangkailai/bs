#-------------------------????????????????? start------------------------
server.port=7002
server.servlet.context-path=/businessSystem
server.servlet.session.cookie.path=/
spring.jmx.default-domain=businessSystem
#-------------------------????????????????? end --------------------------
#-------------------------????????????? start-------------------------------
spring.datasource.primary.name=smartpark
spring.datasource.primary.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.primary.jdbc-url=jdbc\:sqlserver\://127.0.0.1\:1433;DatabaseName\=DB_SmartPark
spring.datasource.primary.username=yitihua
spring.datasource.primary.password=yitihua@12347
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=DatebookHikariCP
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1
#----------------------------mybatis配置 start--------------------------
mybatis.typeAliasesPackage=com.tjpu.model
mybatis.mapperLocations=classpath\:com/tjpu/sp/mapping/**/*.xml
mybatis.configuration.call-setters-on-nulls=true
#开启MyBatis的二级缓存
mybatis.configuration.cache-enabled=true
mybatis.default-fetch-size:100
mybatis.default-statement-timeout:30
#----------------------------mybatis配置 end-----------------------------
#------------------------配置要将该服务注册到注册中心的 名称、地址start-------------------
eureka.client.registerWithEureka=false
spring.application.name=businessSystem
eureka.client.serviceUrl.defaultZone=http://127.0.0.1:2000/eureka
#??????IP+??????ID
eureka.instance.instance-id=${spring.cloud.client.ipaddress}:${server.port}
eureka.instance.prefer-ip-address=true
eureka.instance.health-check-url=http://${spring.cloud.client.ipaddress}:${server.port}${server.servlet.context-path:}/actuator/health
eureka.instance.status-page-url-path=http://${spring.cloud.client.ipaddress}:${server.port}${server.servlet.context-path:}/actuator/info
eureka.instance.home-page-url=http://${spring.cloud.client.ipaddress}:${server.port}${server.servlet.context-path:}
eureka.instance.metadata-map.configPath=${server.servlet.context-path:}
eureka.instance.management.context-path=${server.servlet.context-path:}
#------------------------配置要将该服务注册到注册中心的 名称、地址end--------------------
#-------------------------------监听python接口----------------------------------



#-------------------------------监听python接口----------------------------------

#------------------------------------AOP切面配置 start--------------------
spring.aop.auto=true
spring.aop.proxy-target-class=true
#------------------------------------AOP切面配置 end----------------------
# ------------------------------REDIS 配置(RedisProperties) start-----------------

#Redis数据库索引
spring.redis.database=0
# Redis服务器连接密码
spring.redis.password=hy
# 连接超时时间（毫秒）
spring.redis.timeout=3000

#redis哨兵增加配置
spring.redis.sentinel.master=mymaster
spring.redis.sentinel.nodes=127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381

#redis连接池增加配置

# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=80
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=80
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
# 连接池最大阻塞等待时间（使用负值表示没有限制)
spring.redis.lettuce.pool.max-wait=10000

#session存储在redis配置
spring.session.store-type=redis
# ------------------------------REDIS 配置end(RedisProperties) end -----------------
#----------------------------------内置tomcat配置 start-----------------------------
# 配置Tomcat编码,默认为UTF-8
server.tomcat.uri-encoding=UTF-8
# 配置最大线程数
server.tomcat.max-threads=1000
#取值true、false，需要accesslog时设置为true
server.tomcat.accesslog.enabled=true
#----------------------------------内置tomcat配置 end-----------------------------
#----------------------------------分页插件---------start-----------------------
pagehelper.helperDialect=sqlserver
pagehelper.offset-as-page-num=true
pagehelper.reasonable=false
pagehelper.supportMethodsArguments=true
pagehelper.row-bounds-with-count=true
#----------------------------------分页插件-----end ---------------------------
#----------------------------------Feign 连接超时配置---------start-----------------------
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:300000
ribbon.ReadTimeout=300000
ribbon.ConnectTimeout=300000
ribbon.MaxAutoRetries=0
#----------------------------------Feign 连接超时配置-----end ---------------------------
#----------------------------------log4j2日志配置---------start-----------------------
logging.config=classpath:config/log4j2.properties
logging.level.com.tjpu.sp.dao=debug
#----------------------------------log4j2???????-----end ---------------------------
#---------------------------------------------mongodb?????????? start-----------------------------
#?????_???????
mongodb.primary.host=127.0.0.1
mongodb.primary.port=27017
mongodb.primary.database=OriginalData
mongodb.primary.password=
mongodb.primary.username=
#?????_???????
mongodb.second.host=127.0.0.1
mongodb.second.port=27017
mongodb.second.database=DCFileData
mongodb.second.password=
mongodb.second.username=
#?????_???????
mongodb.originalpacket.host=127.0.0.1
mongodb.originalpacket.port=27017
mongodb.originalpacket.database=OriginalPacket
mongodb.originalpacket.password=
mongodb.originalpacket.username=
#??????????
mongo.options.min-connections-per-host=0
#最大连接数
mongo.options.max-connections-per-host=10
#此参数跟connectionsPerHost的乘机为一个线程变为可用的最大阻塞数
mongo.options.threads-allowed-to-block-for-connection-multiplier=5
mongo.options.server-selection-timeout=30000
#一个线程等待链接可用的最大等待毫秒数
mongo.options.max-wait-time=120000
#链接超时的毫秒数,0表示不超时,此参数只用在新建一个新链接时
mongo.options.connect-timeout=10000
#此参数表示socket I/O读写超时时间
mongo.options.socket-timeout=0


#---------------------------------------------在线系统mongodb配置 end-----------------------------
#---------------------------------------------springboot文件上传大小配置 start-----------------------------
spring.servlet.multipart.max-file-size=20480Mb
spring.servlet.multipart.max-request-size=20480Mb
spring.servlet.multipart.enabled=true
#---------------------------------------------springboot文件上传大小配置 end-----------------------------


#---------------------------------------------rabbitmq start-----------------------------
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
spring.rabbitmq.virtual-host=/
# 开启发送确认
spring.rabbitmq.publisher-confirms=true
# 开启发送失败退回
spring.rabbitmq.publisher-returns=true
#消费者端的重试
spring.rabbitmq.listener.direct.retry.enabled=true
# 开启ACK
spring.rabbitmq.listener.direct.acknowledge-mode=manual
#消费者端的重试
spring.rabbitmq.listener.simple.retry.enabled=true
# 开启ACK
spring.rabbitmq.listener.simple.acknowledge-mode=manual
#消费者的最小数量
spring.rabbitmq.listener.simple.concurrency=10
#消费者的最大数量
spring.rabbitmq.listener.simple.max-concurrency=20
#在单个请求中处理的消息个数，他应该大于等于事务数量
spring.rabbitmq.listener.simple.prefetch=20
#启动时自动启动容器	true
spring.rabbitmq.listener.simple.auto-startup=true
#投递失败时是否重新排队
spring.rabbitmq.listener.simple.default-requeue-rejected=true
#超时时间
spring.rabbitmq.template.reply-timeout=15000
#设置为true的时候RabbitTemplate(生产端)能够实现重试
spring.rabbitmq.template.retry.enabled=true
#第一次与第二次发布消息的时间间隔 1000
spring.rabbitmq.template.retry.initial-interval=1000
#尝试发布消息的最大数量 3
spring.rabbitmq.template.retry.max-attempts=3
#尝试发布消息的最大时间间隔 10000
spring.rabbitmq.template.retry.max-interval=10000
#上一次尝试时间间隔的乘数 1.0
spring.rabbitmq.template.retry.multiplier=1.0
#---------------------------------------------rabbitmq end-----------------------------
